#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Crossroads {
public:
	vector <int> getOut(vector <int> angles) {
	    vector<bool> carry_on(angles.size(),true);
	    for(int i=0; i<angles.size(); ++i){
//		if(angles[i]==90) continue;
		for(int j=i+1; j<angles.size(); ++j){
		    if(angles[i] < angles[j]){
			int i_rad = abs(90 - angles[i]);
			int j_rad = abs(90 - angles[j]);
			int lose = i_rad > j_rad ? i : j;
			carry_on[lose] = false;
		    }
		}
	    }
	    vector<int> res;
	    for(int i=0; i<carry_on.size(); ++i)
		if(carry_on[i]) res.push_back(i);
	    return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	Crossroads *obj;
	vector <int> answer;
	obj = new Crossroads();
	clock_t startTime = clock();
	answer = obj->getOut(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << "{";
			for (int i = 0; int(p1.size()) > i; ++i) {
				if (i > 0) {
					cout << ",";
				}
				cout << p1[i];
			}
			cout << "}" << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(answer.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << answer[i];
		}
		cout << "}" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {105,75,25,120,35,75};
	p1 = {0,1,5};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,1,1,1,1,1};
	p1 = {0,1,2,3,4,5};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {13};
	p1 = {0};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {90,123,1,23,132,11,28,179,179,77,113,91};
	p1 = {0};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {179,89,90,91,1};
	p1 = {0,2,4};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {89,91};
	p1 = {0};
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = {140,118,54,166,151,44,90,5,14,6,64,129,74,33,134,25,11,95,65,145,29,162,24,147,45,103,63,97,120,156,167,170,19,28,100,144,161,13,157,148};
	p1 = {0,1,6};
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are watching a car race. Each car starts a different point on the x-axis, travels at the same speed, and starts at the same time. However, each car is travelling along a different road (which extends to infinity in one direction, and is stopped by the x-axis in the other direction), and each road has its own direction specified by an angle between 1 and 179, inclusive. An angle of 90 indicates that the road heads directly in the positive y direction, while an angle of 1 indicates that the road heads just a little bit north of the positive x direction. Note that cars never head in the negative y direction.
// 
// 
// Sometimes, two or more roads intersect at some point.  When this happens, the car that reaches the intersection first is able to block the intersection so that no other cars can pass through it.  If two cars reach an intersection at the same time, the one with the lower index passes, while the other one is blocked.
// 
// 
// In this picture, the cars following the red paths make it through all of the intersections, while the cars on the gray paths are blocked.
// You will be given a vector <int> angles, where the ith element of angles is the angle between the x-axis and the road that the ith car drives on, in degrees.  The order of the elements of angles corresponds to the order of the cars along the x-axis (no two cars start at the exact same location), with the first element of angles corresponding to the car with the leftmost starting position on the x-axis.
// Your method should return a vector <int> containing the 0-based indices of all the cars that will pass all of the intersections along their roads.  Your return should be sorted in ascending order.
// Note that the exact locations of the cars along the x-axis do not matter.  All that matters is their order, and the directions in which they head.
// 
// 
// DEFINITION
// Class:Crossroads
// Method:getOut
// Parameters:vector <int>
// Returns:vector <int>
// Method signature:vector <int> getOut(vector <int> angles)
// 
// 
// CONSTRAINTS
// -angles will contain between 1 and 50 elements, inclusive.
// -Each elemtent of angles will be between 1 and 179, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {105, 75, 25, 120, 35, 75}
// 
// Returns: { 0,  1,  5 }
// 
// The example from the problem statement.
// 
// 
// 1)
// {1, 1, 1, 1, 1, 1}
// 
// Returns: { 0,  1,  2,  3,  4,  5 }
// 
// No two cars' paths will ever intersect, so they all pass all intersections.
// 
// 2)
// {13}
// 
// Returns: { 0 }
// 
// Only one car.
// 
// 3)
// {90, 123, 1, 23, 132, 11, 28, 179, 179, 77, 113, 91}
// 
// Returns: { 0 }
// 
// The first car passes all intersections. The last car will be stopped by the first car. All other cars are between those two, and will be stopped by one of them.
// 
// 4)
// {179, 89, 90, 91, 1}
// 
// Returns: { 0,  2,  4 }
// 
// Neither the first nor the last car will intersect with any other car. Car 1 and car 3 will both be stopped by car 2.
// 
// 5)
// {89, 91}
// 
// Returns: { 0 }
// 
// Both cars reach the intersection at the same time, and hence only the first one passes.
// 
// 6)
// {140, 118, 54, 166, 151, 44, 90, 5, 14, 6,
//  64, 129, 74, 33, 134, 25, 11, 95, 65, 145,
//  29, 162, 24, 147, 45, 103, 63, 97, 120, 156,
//  167, 170, 19, 28, 100, 144, 161, 13, 157, 148}
// 
// Returns: { 0,  1,  6 }
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
