#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class InvariantSets {
public:
	long long countSets(vector <int> f) {
	    long long res=1;
	    vector<int> test={};
	    bool flag = false;
	    for(int i=0; i<f.size(); ++i){
		test.push_back(i);
		for(int j=0; j<i; ++j){
		    if(f[j]>test.back()){
			flag =true;
			break;
		    }
		}
		if(flag) continue;
		res++;
		flag = false;
	    }
	    return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	InvariantSets *obj;
	long long answer;
	obj = new InvariantSets();
	clock_t startTime = clock();
	answer = obj->countSets(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << p1 << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << answer << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	long long p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {1,0,0,0};
	p1 = 5ll;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {1,2,0};
	p1 = 2ll;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,0,1,2};
	p1 = 5ll;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,1,2,3,4,5};
	p1 = 64ll;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {12,10,0,4,0,6,3,8,9,14,1,5,6,12,5};
	p1 = 90ll;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Janusz is a young physicist.
// Recently he has been studying a dynamic system.
// There are n elements in the system.
// We will label them 0 through n-1.
// The set of all elements will be denoted E.
// 
// Janusz models the changes in his system using a function that operates on elements of E.
// You are given this function as a vector <int> f with n elements, each between 0 and n-1, inclusive.
// The vector <int> f describes Janusz's function as follows:
// For each valid i, if the function is given the input i, its output will be f[i].
// 
// For Janusz, invariant subsets of E have a special significance.
// A subset S of the set E is called invariant (with respect to f) if it has the following property: for any x in S, f[x] is also in S.
// For example, the entire set E is invariant (for any f).
// The empty set is always invariant as well.
// 
// Given is the vector <int> f.
// Compute and return the number of invariant subsets of E (including E itself and the empty set).
// 
// DEFINITION
// Class:InvariantSets
// Method:countSets
// Parameters:vector <int>
// Returns:long long
// Method signature:long long countSets(vector <int> f)
// 
// 
// NOTES
// -You may assume that the return value will fit into integer type long long.
// 
// 
// CONSTRAINTS
// -f will have between 1 and 50 elements, inclusive.
// -Each element of f will be between 0 and n-1, inclusive, where n is the number of elements of f.
// 
// 
// EXAMPLES
// 
// 0)
// {1,0,0,0}
// 
// Returns: 5
// 
// The invariant sets are: {}, {0,1}, {0,1,2}, {0,1,3}, {0,1,2,3}.
// 
// 1)
// {1,2,0}
// 
// Returns: 2
// 
// There are only 2 invariants sets: {} and {0,1,2}.
// 
// 2)
// {0,0,1,2}
// 
// Returns: 5
// 
// The invariant sets are: {}, {0}, {0,1}, {0,1,2}, {0,1,2,3}.
// 
// 3)
// {0,1,2,3,4,5}
// 
// Returns: 64
// 
// Every set is invariant when f(x)=x for all x.
// 
// 4)
// {12, 10, 0, 4, 0, 6, 3, 8, 9, 14, 1, 5, 6, 12, 5}
// 
// Returns: 90
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
