#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Mortgage {
public:
	int monthlyPayment(int loan, int interest, int term) {
	    int result=0;
	    int ep=loan, sp=1;
	    int pay=(ep-sp)/2;
	    while(ep-sp>1){
		long long int rest=loan;
		bool flag = false;
		for(int i=0; i < term * 12; i++){
		    if(rest<pay){
			result = pay;
			flag = true;
			break;
		    }
		    rest -= pay;
		    rest = ceil(rest * (1.0 + (double)interest / (double)12000));
		}

		flag ? ep=pay : sp=pay;
		pay = flag ? (pay-sp)/2 : (pay+(ep-pay)/2);

		// if(flag){
		//     ep = pay;
		//     pay = (pay - sp)/2;
		// }
		// else{
		//     sp = pay;
		//     pay = pay + (ep-pay) / 2;
		// }
	    }
	    return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Mortgage *obj;
	int answer;
	obj = new Mortgage();
	clock_t startTime = clock();
	answer = obj->monthlyPayment(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
//		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
		    cout << "Desired answer:" ;//<< endl;
			cout << "\t" << p3 << endl;
		}
		cout << "Your answer:" ;//<< endl;
		cout << "\t" << answer << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	int p2;
	int p3;

	// ----- test 2 -----
	disabled = false;
	p0 = 1000000;
	p1 = 1000000;
	p2 = 1000;
	p3 = 988143;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 0 -----
	disabled = false;
	p0 = 1000;
	p1 = 50;
	p2 = 1;
	p3 = 86;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 2000000000;
	p1 = 6000;
	p2 = 1;
	p3 = 671844808;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	
	// ----- test 3 -----
	disabled = false;
	p0 = 1000000;
	p1 = 129;
	p2 = 30;
	p3 = 10868;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 1999999999;
	p1 = 1000000;
	p2 = 1;
	p3 = 1976284585;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// When purchasing a new home, the purchasers often take out a loan to pay for it.  In this problem, we will be considering loans with the following terms:
// At the beginning of each month, the purchasers pay a fixed amount towards settling the loan, which decreases the amount they owe.
// At the end of the month, the amount the purchasers owe increases due to interest.  Each month, 1/12 of the annual interest rate is added to the amount owed.  Hence, if the annual interest rate is 12%, then the debt increases by 1% each month.  You may assume that the amount owed after adding interest is always rounded up to the nearest dollar greater than or equal to the actual value.
// Your task is, given the annual interest rate in tenths of a percent, the original amount of the loan, and the period over which the loan is to be repaid, calculate the minimum integral monthly payment so that the loan is repaid in term years or less.  All monetary units are in dollars.
// 
// For example, if loan = 1000, interest = 50, and term = 1, then the loan is for $1000, to be paid back in one year, at an annual interest rate of 5%, or (5/12)% per month.  If the purchasers pay back $86 every month, then the total amount owed will be as follows after each month:
// 
// month | after making payment | after interest accrues
// ------+----------------------+------------------------------------
//  1    | 1000 - 86 = 914      | ceiling(914 * (1 + 5/12/100)) = 918
//  2    | 918 - 86  = 832      | ceiling(832 * (1 + 5/12/100)) = 836
//  3    | 836 - 86  = 750      | 754
//  4    | 754 - 86  = 668      | 671
//  5    | 671 - 86  = 585      | 588
//  6    | 588 - 86  = 502      | 505
//  7    | 505 - 86  = 419      | 421
//  8    | 421 - 86  = 335      | 337
//  9    | 337 - 86  = 251      | 253
//  10   | 253 - 86  = 167      | 168
//  11   | 168 - 86  = 82       | 83
//  12   | 86 is more than enough to pay off the rest 
// 
// Clearly, 85 a month wouldn't be enough, since we just barely paid off the loan at 86.
// 
// DEFINITION
// Class:Mortgage
// Method:monthlyPayment
// Parameters:int, int, int
// Returns:int
// Method signature:int monthlyPayment(int loan, int interest, int term)
// 
// 
// CONSTRAINTS
// -loan will be between 100 and 2,000,000,000, inclusive.
// -interest will be between 1 and 1,000,000, inclusive.
// -term will be between 1 and 1000, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 1000
// 50
// 1
// 
// Returns: 86
// 
// From the problem statement.
// 
// 1)
// 2000000000
// 6000
// 1
// 
// Returns: 671844808
// 
// interest = 6000 means that the monthly interest is a whopping 50%!
// 
// 2)
// 1000000
// 1000000
// 1000
// 
// Returns: 988143
// 
// The interest is so high that even if we had 1000 years to pay back the loan, we'd still have to pay almost a million dollars a month.
// 
// 3)
// 1000000
// 129
// 30
// 
// Returns: 10868
// 
// 4)
// 1999999999
// 1000000
// 1
// 
// Returns: 1976284585
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
