#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <math.h>

using namespace std;

double calcDistance(int x1, int y1, int x2, int y2){
    const int lat1 = x1 * M_PI/180;
    const int lat2 = x2 * M_PI/180;
    const int lon1 = y1 * M_PI/180;
    const int lon2 = y2 * M_PI/180;
    const int radius = 4000;
    return radius * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2));
}

class AirTravel {
public:
	double shortestTrip(vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination) {
	    double result;
	    return result;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <string> p2, int p3, int p4, bool hasAnswer, double p5) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}" << "," << p3 << "," << p4;
	cout << "]" << endl;
	AirTravel *obj;
	double answer;
	obj = new AirTravel();
	clock_t startTime = clock();
	answer = obj->shortestTrip(p0, p1, p2, p3, p4);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p5 - answer) <= 1e-9 * max(1.0, fabs(p5));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << p5 << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << answer << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	vector <string> p2;
	int p3;
	int p4;
	double p5;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {0,0,70};
	p1 = {90,0,45};
	p2 = {"2","0 2","0 1"};
	p3 = 0;
	p4 = 1;
	p5 = 10612.237799994255;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {0,0,70};
	p1 = {90,0,45};
	p2 = {"1 2","0 2","0 1"};
	p3 = 0;
	p4 = 1;
	p5 = 6283.185307179586;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {0,30,60};
	p1 = {25,-130,78};
	p2 = {"1 2","0 2","1 2"};
	p3 = 0;
	p4 = 0;
	p5 = 0.0;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {0,20,55};
	p1 = {-20,85,42};
	p2 = {"1","0","0"};
	p3 = 0;
	p4 = 2;
	p5 = -1.0;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are working for a shipping company, TopShipper, that specializes in shipping products by air. Your cargo jets transport items between a set of airports. From each airport, you can travel directly to some subset of the other airports. (Some airports may be too far, or may not have a safe passageway.)  The ability to travel from one airport to another does not guarantee the ability to travel directly in the opposite direction.
// 
// You are about to send out a cargo plane on a trip to pick up a large shipment of a certain product. Unfortunately, only one other airport has this product for pickup, and you aren't guaranteed that there is a safe, direct route to the other airport.  You may have to travel through one or more other airports to get to your final destination.  Nonetheless, you wish to ultimately end up at the airport that has your desired product, and which you can get to by travelling the shortest possible distance.
// 
// You are to return a double indicating the number of miles travelled by the cargo plane along the optimal route from the origin to the destination.  If no such route exists, return -1.
// 
// Given two coordinates, (lat1, lon1) and (lat2, lon2), the shortest distance between them is across an arc known as a great circle.  The arclength along a great circle, between two points on the earth can be calculated as:
// radius * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2))
// 
// For purposes of this problem, the radius of the earth is 4000 miles.
// 
// You are given the latitude and longitude coordinates of each airport in latitude and longitude.  The i-th element of latitude corresponds to the i-th element of longitude.  You are also given vector <string> canTravel.  The i-th element of canTravel is a space-delimited list of the 0-based indices of the airports that can be reached from airport i.  Finally, you are given origin and destination, the indices of the airports at which you start and end your trip.
// 
// DEFINITION
// Class:AirTravel
// Method:shortestTrip
// Parameters:vector <int>, vector <int>, vector <string>, int, int
// Returns:double
// Method signature:double shortestTrip(vector <int> latitude, vector <int> longitude, vector <string> canTravel, int origin, int destination)
// 
// 
// CONSTRAINTS
// -latitude, longitude, and canTravel will contain between 1 and 20 elements, inclusive.
// -latitude, longitude, and canTravel will each contain the same number of elements.
// -Each element of latitude will be between -89 and 89, inclusive.
// -Each element of longitude will be between -179 and 179, inclusive.
// -Each element of canTravel will be a space-delimited list of integers, with no leading zeroes.
// -Each integer represented in each element of canTravel will be between 0 and n - 1, where n is the number of elements in latitude.
// -origin and destination will be between 0 and n - 1, inclusive, where n is the number of elements in latitude.
// -No two airports will reside at the same latitude and longitude.
// 
// 
// EXAMPLES
// 
// 0)
// {0, 0, 70}
// {90, 0, 45}
// {"2", "0 2", "0 1"}
// 0
// 1
// 
// Returns: 10612.237799994255
// 
// Here, we are looking to travel from airport 0 to airport 1.
// 
// Using the given formula, we calculate that the distance from 0 to 1 is 6283, from 0 to 2 is 5306, and from 1 to 2 is 5306.
// 
// A direct route from airport 0 to 1 would be fastest, if such a route were allowed.  Since it is not, we have to travel through airport 2.
// 
// 1)
// {0, 0, 70}
// {90, 0, 45}
// {"1 2", "0 2", "0 1"}
// 0
// 1
// 
// Returns: 6283.185307179586
// 
// Here, we have the same three airports, and there is a safe route between any two.  Thus, we take the direct route, which is quickest.
// 
// 2)
// {0, 30, 60}
// {25, -130, 78}
// {"1 2", "0 2", "1 2"}
// 0
// 0
// 
// Returns: 0.0
// 
// We are free to travel as we wish, but since our destination is the same as our point of origin, we don't have much travel to do.
// 
// 3)
// {0, 20, 55}
// {-20, 85, 42}
// {"1", "0", "0"}
// 0
// 2
// 
// Returns: -1.0
// 
// Notice here that we could go from airport 2 to airport 0, but not from 0 to 2.  Given the available routes, there is no way we can get from airport 0 to airport 2.
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
