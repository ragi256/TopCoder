#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FuelConsumption {
public:
	double maximalDistance(vector <int> velocities, vector <int> consumptions, int fuel) {
//	    vector<double> efficiency;
	    double efficiency = 0;
	    for(int i=0; i<velocities.size(); i++){
		double temp = velocities[i] / (double)consumptions[i];
		efficiency = max(temp, efficiency);
	    }
	    return efficiency*fuel;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	FuelConsumption *obj;
	double answer;
	obj = new FuelConsumption();
	clock_t startTime = clock();
	answer = obj->maximalDistance(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == answer && fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << p3 << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << answer << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	vector <int> p0;
	vector <int> p1;
	int p2;
	double p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = {100};
	p1 = {10000};
	p2 = 10000;
	p3 = 100.0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = {70,80,90,100,60,110};
	p1 = {4000,4000,4000,4000,4000,4000};
	p2 = 40000;
	p3 = 1100.0;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = {250,240,230,220,210,211};
	p1 = {5000,4500,4000,3500,3000,3000};
	p2 = 50000;
	p3 = 3516.6666666666665;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = {5,10,20,40,80};
	p1 = {1000,2500,6250,9000,18000};
	p2 = 47832;
	p3 = 239.16;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = {5,10,20,40,80,160};
	p1 = {1000,2500,6250,8000,9500,20000};
	p2 = 47832;
	p3 = 402.79578947368424;
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = {240,195,130,133,15,160,111,206,72,149,146,115,235,183,102,96,163,61,196,52,87,139,33,7,90,67,118,227,197,114};
	p1 = {14837,2981,17292,18591,4832,7461,17991,18369,18291,9400,15179,3317,2595,2441,6936,8028,14973,18981,12503,7816,2883,6385,6230,18157,16567,9310,2866,4687,14171,4477};
	p2 = 31710;
	p3 = 2871.6184971098264;
	all_right = (disabled || KawigiEdit_RunTest(5, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are taking your car on a long trip and have only a limited amount of fuel. You know how many liters of fuel your car uses per hour for certain speeds and you'd like to know how far a certain amount of fuel will take you when travelling at the optimal speed.
// 
// 
// You will be given a vector <int> velocities and a vector <int> consumptions. velocities specifies a number of velocities in kilometers per hour. The ith element of consumptions is the amount of fuel (in milliliters) the car will consume in 1 hour, if your speed is equal to the ith element of velocities. In addition, you will be given an int fuel specifying the total amount of fuel in milliliters.
// Your method should return a double, equal to the maximum distance that the car can travel (in kilometers) with the given amount of fuel, and travelling at a constant velocity equal to one of the elements of velocities.
// 
// DEFINITION
// Class:FuelConsumption
// Method:maximalDistance
// Parameters:vector <int>, vector <int>, int
// Returns:double
// Method signature:double maximalDistance(vector <int> velocities, vector <int> consumptions, int fuel)
// 
// 
// NOTES
// -The returned value must be accurate to within a relative or absolute value of 1E-9. 
// 
// 
// CONSTRAINTS
// -velocities and consumptions will contain the same number of elements.
// -velocities and consumptions will each contain between 1 and 50 elements, inclusive.
// -Each element of velocities will be between 5 and 250, inclusive.
// -Each element of consumptions will be between 1000 and 20000, inclusive.
// -fuel will be between 100 and 50000, inclusive.
// -velocities will not contain duplicate elements.
// 
// 
// EXAMPLES
// 
// 0)
// {100}
// {10000}
// 10000
// 
// Returns: 100.0
// 
// At 100 km/hour, you consume 10 liters of fuel per hour. You have 10 liters, so you can cover 100 kilometers.
// 
// 1)
// {70, 80, 90, 100, 60, 110}
// {4000, 4000, 4000, 4000, 4000, 4000}
// 40000
// 
// Returns: 1100.0
// 
// Here, your car consumes the same amount of fuel at different velocities. In such cases the faster you drive the further you go.
// 
// 2)
// {250, 240, 230, 220, 210, 211}
// {5000, 4500, 4000, 3500, 3000, 3000}
// 50000
// 
// Returns: 3516.6666666666665
// 
// 3)
// {5, 10, 20, 40, 80}
// {1000, 2500, 6250, 9000, 18000}
// 47832
// 
// Returns: 239.16
// 
// 4)
// {5, 10, 20, 40, 80, 160}
// {1000, 2500, 6250, 8000, 9500, 20000}
// 47832
// 
// Returns: 402.79578947368424
// 
// 5)
// {240, 195, 130, 133, 15, 160, 111, 206, 72, 149,
//  146, 115, 235, 183, 102, 96, 163, 61, 196, 52,
//  87, 139, 33, 7, 90, 67, 118, 227, 197, 114}
// {14837, 2981, 17292, 18591, 4832, 7461, 17991, 18369, 18291, 9400,
//  15179, 3317, 2595, 2441, 6936, 8028, 14973, 18981, 12503, 7816,
//  2883, 6385, 6230, 18157, 16567, 9310, 2866, 4687, 14171, 4477}
// 31710
// 
// Returns: 2871.6184971098264
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
