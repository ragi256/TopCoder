#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <limits>
#include <tuple>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class LongWordsDiv2 {
public:
	string find(string word) {
	    int size=word.size();
	    set<char> sigma;
	    for(int i=0; i<size; ++i)
		sigma.insert(word[i]);
	    for(set<char>::iterator it= sigma.begin(), end=sigma.end();
		it!=end; ++it){
		string consecutive(2, *it);
		if(word.find(consecutive)!=string::npos)
		    return "Dislikes";
		vector<int> chr_pos;
		for(int i=0; i<size; ++i){
		    if(word[i]==*it)
			chr_pos.push_back(i);
		}
		int pos_size = chr_pos.size();
		bool flag = false;
		if(1<pos_size){
		    for(int i=0; i<pos_size; ++i){
			int pos=chr_pos[i];
			int next;
			if(i==pos_size-1)
			    next = word.size();
			else
			    next = chr_pos[i+1];
			string temp = word.substr(pos+1, next-pos-1);
			char chr=' ';
//			cout << "====================" << endl;
			for(int j=pos; j<next; ++j){
//			    cout << *it << ' ' << temp << endl;
			    if(*it==word[j]) continue;
			    if(flag==false){
				if(temp.find(word[j])!=string::npos){
				    cout << *it << ' ' << word[j] << endl;
				    flag=true;
				    chr = word[j];
				    break;
				}
			    }
			    else{
				if(temp.find(chr)!=string::npos){ 
				    cout << *it << ' ' << chr << "!!" <<  endl;
				return "Dislikes";
				}
			    }
			}
		    }
		}
	
	    }
	    return "Likes";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"";
	cout << "]" << endl;
	LongWordsDiv2 *obj;
	string answer;
	obj = new LongWordsDiv2();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
		if (hasAnswer) {
			cout << "Desired answer:" << endl;
			cout << "\t" << "\"" << p1 << "\"" << endl;
		}
		cout << "Your answer:" << endl;
		cout << "\t" << "\"" << answer << "\"" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	string p0;
	string p1;
	
	// ----- test 0 -----
	disabled = false;
	p0 = "AAA";
	p1 = "Dislikes";
	all_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = "ABCBA";
	p1 = "Likes";
	all_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = "ABCBAC";
	p1 = "Dislikes";
	all_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = "TOPCODER";
	p1 = "Likes";
	all_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = "VAMOSGIMNASIA";
	p1 = "Dislikes";
	all_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 5 -----
	disabled = false;
	p0 = "SINGLEROUNDMATCH";
	p1 = "Likes";
	all_right = (disabled || KawigiEdit_RunTest(5, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 6 -----
	disabled = false;
	p0 = "DALELOBO";
	p1 = "Likes";
	all_right = (disabled || KawigiEdit_RunTest(6, p0, true, p1) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Ciel likes all the words that have the following properties:
// 
// Each letter of the word is an uppercase English letter.
// Equal letters are never consecutive.
// There is no subsequence of the form xyxy, where x and y are (not necessarily distinct) letters. Note that a subsequence doesn't have to be contiguous.
// 
// Examples:
// 
// Ciel does not like "ABBA" because there are two consecutive 'B's.
// Ciel does not like "THETOPCODER" because it contains the subsequence "TETE".
// Ciel does not like "ABACADA" because it contains the subsequence "AAAA". (Note that here x=y='A'.)
// Ciel likes "A", "ABA", and also "ABCBA".
// 
// Given a string word, return "Likes" (quotes for clarity) if Ciel likes word and "Dislikes" if she does not.
// 
// 
// DEFINITION
// Class:LongWordsDiv2
// Method:find
// Parameters:string
// Returns:string
// Method signature:string find(string word)
// 
// 
// CONSTRAINTS
// -word will contain between 1 and 100 characters, inclusive.
// -Each character of word will be an uppercase English letter ('A'-'Z').
// 
// 
// EXAMPLES
// 
// 0)
// "AAA"
// 
// Returns: "Dislikes"
// 
// 
// 
// 1)
// "ABCBA"
// 
// Returns: "Likes"
// 
// 
// 
// 2)
// "ABCBAC"
// 
// Returns: "Dislikes"
// 
// 
// 
// 3)
// "TOPCODER"
// 
// Returns: "Likes"
// 
// 
// 
// 4)
// "VAMOSGIMNASIA"
// 
// Returns: "Dislikes"
// 
// 
// 
// 5)
// "SINGLEROUNDMATCH"
// 
// Returns: "Likes"
// 
// 
// 
// 6)
// "DALELOBO"
// 
// Returns: "Likes"
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
